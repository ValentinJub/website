const output = [{"title":"Read a whole number input","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"isNumber","args":["convertHandler.getNum(N)","'Is a number'"]}]},{"title":"Read a decimal number input","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"isNumber","args":["convertHandler.getNum(N)","'Is a decimal number'"]}]},{"title":"Read a fractional number input","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"isNumber","args":["convertHandler.getNum(\"\" + N1 + \"/\" + N2)","'Is a fractional number'"]}]},{"title":"Read a fractional input with decimal","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"isNumber","args":["convertHandler.getNum(\"\" + N1 + \"/\" + N2)","'Is a fractional number with decimal'"]}]},{"title":"Return an error on a double-fraction","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.getNum(N1 + \"/\" + N2 + \"/\" + N3)","'invalid number'"]}]},{"title":"Default to a numerical input of 1 when no numerical input is provided.","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.getNum(input)","1"]}]},{"title":"read each valid input unit","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"isTrue","args":["units.includes(convertHandler.getUnit('gAl'))"]},{"method":"isTrue","args":["units.includes(convertHandler.getUnit('L'))"]},{"method":"isTrue","args":["units.includes(convertHandler.getUnit('MI'))"]},{"method":"isTrue","args":["units.includes(convertHandler.getUnit('KM'))"]},{"method":"isTrue","args":["units.includes(convertHandler.getUnit('lBS'))"]},{"method":"isTrue","args":["units.includes(convertHandler.getUnit('Kg'))"]},{"method":"isFalse","args":["units.includes(convertHandler.getUnit('mil'))"]},{"method":"isFalse","args":["units.includes(convertHandler.getUnit('min'))"]}]},{"title":"Return an error for an invalid input unit","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.getUnit('mil')","'invalid unit'"]},{"method":"strictEqual","args":["convertHandler.getUnit('min')","'invalid unit'"]},{"method":"strictEqual","args":["convertHandler.getUnit('g')","'invalid unit'"]},{"method":"strictEqual","args":["convertHandler.getUnit('m')","'invalid unit'"]},{"method":"strictEqual","args":["convertHandler.getUnit('oz')","'invalid unit'"]},{"method":"strictEqual","args":["convertHandler.getUnit('hello')","'invalid unit'"]}]},{"title":"Return the correct return unit for each valid input unit","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.getReturnUnit('mi')","'km'"]},{"method":"strictEqual","args":["convertHandler.getReturnUnit('km')","'mi'"]},{"method":"strictEqual","args":["convertHandler.getReturnUnit('kg')","'lbs'"]},{"method":"strictEqual","args":["convertHandler.getReturnUnit('lbs')","'kg'"]},{"method":"strictEqual","args":["convertHandler.getReturnUnit('gal')","'L'"]},{"method":"strictEqual","args":["convertHandler.getReturnUnit('l')","'gal'"]}]},{"title":"Correctly return the spelled-out string unit for each valid input unit.","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.spellOutUnit('mi')","'miles'"]},{"method":"strictEqual","args":["convertHandler.spellOutUnit('km')","'kilometers'"]},{"method":"strictEqual","args":["convertHandler.spellOutUnit('lbs')","'pounds'"]},{"method":"strictEqual","args":["convertHandler.spellOutUnit('kg')","'kilograms'"]},{"method":"strictEqual","args":["convertHandler.spellOutUnit('l')","'liters'"]},{"method":"strictEqual","args":["convertHandler.spellOutUnit('gal')","'gallons'"]}]},{"title":"Convert kilometers to miles","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.convert(1, \"km\")","0.62137"]}]},{"title":"Convert miles to kilometers","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.convert(23, \"mi\")","37.01482"]}]},{"title":"Convert gallons to liters","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.convert(66, \"gal\")","249.83706"]}]},{"title":"Convert liters to gallons","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.convert(25/4, \"l\")","1.65108"]}]},{"title":"Convert kilograms to pounds","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.convert(1/3, \"kg\")","0.73487"]}]},{"title":"Convert pounds to kilograms","context":" -> Unit Tests -> Read Inputs","state":"passed","assertions":[{"method":"strictEqual","args":["convertHandler.convert(27, \"lbs\")","12.24698"]}]},{"title":"Convert a valid input such as 10L: GET request to /api/convert","context":" -> Functional Tests -> Conversion tests with chai-http","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"equal","args":["res.type","\"application/json\""]},{"method":"equal","args":["res.body.string","\"10 liters converts to 2.64172 gallons\""]}]},{"title":"Convert an invalid input such as 32g: GET request to /api/convert","context":" -> Functional Tests -> Conversion tests with chai-http","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"equal","args":["res.type","\"text/html\""]},{"method":"equal","args":["res.text","\"invalid unit\""]}]},{"title":"Convert an invalid number such as 3/7.2/4kg: GET request to /api/convert","context":" -> Functional Tests -> Conversion tests with chai-http","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"equal","args":["res.type","\"text/html\""]},{"method":"equal","args":["res.text","\"invalid number\""]}]},{"title":"Convert an invalid number AND unit such as 3/7.2/4kilomegagram: GET request to /api/convert","context":" -> Functional Tests -> Conversion tests with chai-http","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"equal","args":["res.type","\"text/html\""]},{"method":"equal","args":["res.text","\"invalid number and unit\""]}]},{"title":"Convert with no number such as kg: GET request to /api/convert","context":" -> Functional Tests -> Conversion tests with chai-http","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"equal","args":["res.type","\"application/json\""]},{"method":"equal","args":["res.body.string","\"1 kilograms converts to 2.20462 pounds\""]}]}]; export default output;