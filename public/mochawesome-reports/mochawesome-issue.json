{
  "stats": {
    "suites": 5,
    "tests": 14,
    "passes": 12,
    "pending": 0,
    "failures": 2,
    "start": "2023-09-30T13:29:07.778Z",
    "end": "2023-09-30T13:29:13.958Z",
    "duration": 6180,
    "testsRegistered": 14,
    "passPercent": 85.71428571428571,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "de1486db-aa20-42ff-9df8-7cee8e7b59c5",
      "title": "",
      "fullFile": "/home/val/dev/website/public/tests/issue/functional-tests.js",
      "file": "/public/tests/issue/functional-tests.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4066e284-e3cd-48c2-88de-29f04d1880e4",
          "title": "Functional Tests",
          "fullFile": "/home/val/dev/website/public/tests/issue/functional-tests.js",
          "file": "/public/tests/issue/functional-tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "632d01af-6614-4ab0-b2e1-08c696fed9c6",
              "title": "POST Requests to /api/issues/{projectname}",
              "fullFile": "/home/val/dev/website/public/tests/issue/functional-tests.js",
              "file": "/public/tests/issue/functional-tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create an issue with every field",
                  "fullTitle": "Functional Tests POST Requests to /api/issues/{projectname} Create an issue with every field",
                  "timedOut": false,
                  "duration": 250,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    \"issue_title\": \"Issue testf for chai\",\n    \"issue_text\": \"Issue with all fields filled for chai\",\n    \"created_by\": \"Chai tester\",\n    \"assigned_to\": \"chai\",\n    \"status_text\": \"in dev\"\n  })\n  .end(async (err, res) => {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.body.issue_title,'Issue testf for chai');\n    assert.equal(res.body.issue_text,'Issue with all fields filled for chai');\n    assert.equal(res.body.created_by,'Chai tester');\n    assert.equal(res.body.assigned_to,'chai');\n    assert.equal(res.body.status_text,'in dev');\n    assert.equal(res.body.open,true);\n    _id = res.body._id\n    try {\n      let issue = await Issue.findById(_id);\n      ({_id, updated_on, created_on, open, status_text, assigned_to, created_by, issue_text, issue_title} = issue)\n      // console.log(updated_on);\n      done();\n    } catch (e) {\n      console.error(e);\n      done();\n    }\n  })",
                  "err": {},
                  "uuid": "bde73cdc-2f96-4572-9ae5-a3e773ea1e72",
                  "parentUUID": "632d01af-6614-4ab0-b2e1-08c696fed9c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create an issue with only required fields",
                  "fullTitle": "Functional Tests POST Requests to /api/issues/{projectname} Create an issue with only required fields",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    \"issue_title\": \"Issue test for chai\",\n    \"issue_text\": \"Issue with only required fields for chai\",\n    \"created_by\": \"Chai tester\",\n  })\n  .end((err, res) => {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.body.issue_title,'Issue test for chai');\n    assert.equal(res.body.issue_text,'Issue with only required fields for chai');\n    assert.equal(res.body.created_by,'Chai tester');\n    assert.equal(res.body.open,true);\n    done();\n  })",
                  "err": {},
                  "uuid": "da6637f7-7ec7-4ad4-9f5c-0e5066cc6f99",
                  "parentUUID": "632d01af-6614-4ab0-b2e1-08c696fed9c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Create an issue with missing required fields",
                  "fullTitle": "Functional Tests POST Requests to /api/issues/{projectname} Create an issue with missing required fields",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .post('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    \"issue_title\": \"Issue missing required fields for chai\",\n    \"created_by\": \"Chai tester\",\n  })\n  .end((err, res) => {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.body.error,'required field(s) missing');\n    done();\n  })",
                  "err": {},
                  "uuid": "d7d3ab6f-249a-44a9-ab3e-60e63d10c3f8",
                  "parentUUID": "632d01af-6614-4ab0-b2e1-08c696fed9c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bde73cdc-2f96-4572-9ae5-a3e773ea1e72",
                "da6637f7-7ec7-4ad4-9f5c-0e5066cc6f99",
                "d7d3ab6f-249a-44a9-ab3e-60e63d10c3f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 343,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0ae01a91-dec0-4099-9da8-3c1a3149dab4",
              "title": "GET Requests to /api/issues/{projectname}",
              "fullFile": "/home/val/dev/website/public/tests/issue/functional-tests.js",
              "file": "/public/tests/issue/functional-tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "View issues on a project",
                  "fullTitle": "Functional Tests GET Requests to /api/issues/{projectname} View issues on a project",
                  "timedOut": false,
                  "duration": 282,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/issue-tracker/api/issues/apitest')\n  .end((err, res) => {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isArray(res.body)\n    assert.property(res.body[0], 'issue_title')\n    assert.property(res.body[0], 'issue_text')\n    assert.property(res.body[0], 'created_on')\n    assert.property(res.body[0], 'updated_on')\n    assert.property(res.body[0], 'created_by')\n    assert.property(res.body[0], 'assigned_to')\n    assert.property(res.body[0], 'open')\n    assert.property(res.body[0], 'status_text')\n    assert.property(res.body[0], '_id')\n    done();\n  })",
                  "err": {},
                  "uuid": "c1ce0118-10eb-42ce-b087-a980e659ef9f",
                  "parentUUID": "0ae01a91-dec0-4099-9da8-3c1a3149dab4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "View issues on a project with a filter",
                  "fullTitle": "Functional Tests GET Requests to /api/issues/{projectname} View issues on a project with a filter",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/issue-tracker/api/issues/apitest')\n  .query({issue_title: issue_title})\n  .end((err, res) => {\n    if(err) {\n      console.error(err)\n      done();\n    }\n    assert.equal(res.status, 200)\n    assert.isArray(res.body)\n    assert.property(res.body[0], 'issue_title')\n    assert.strictEqual(res.body[0].issue_title, issue_title)\n    assert.property(res.body[0], 'issue_text')\n    assert.strictEqual(res.body[0].issue_text, issue_text)\n    assert.property(res.body[0], 'created_on')\n    assert.property(res.body[0], 'updated_on')\n    assert.property(res.body[0], 'created_by')\n    assert.strictEqual(res.body[0].created_by, created_by)\n    assert.property(res.body[0], 'assigned_to')\n    assert.strictEqual(res.body[0].assigned_to, assigned_to)\n    assert.property(res.body[0], 'open')\n    assert.strictEqual(res.body[0].open, open)\n    assert.property(res.body[0], 'status_text')\n    assert.strictEqual(res.body[0].status_text, status_text)\n    assert.property(res.body[0], '_id')\n    done();\n  });",
                  "err": {},
                  "uuid": "6878c541-5f60-4a76-b8ca-1e1f45ebb96f",
                  "parentUUID": "0ae01a91-dec0-4099-9da8-3c1a3149dab4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "View issues on a project with multiple filters",
                  "fullTitle": "Functional Tests GET Requests to /api/issues/{projectname} View issues on a project with multiple filters",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/issue-tracker/api/issues/apitest')\n  .query({issue_title: issue_title, issue_text: issue_text})\n  .end((err, res) => {\n    if(err) {\n      console.error(err)\n      done();\n    }\n    assert.equal(res.status, 200)\n    assert.isArray(res.body)\n    assert.property(res.body[0], 'issue_title')\n    assert.strictEqual(res.body[0].issue_title, issue_title)\n    assert.property(res.body[0], 'issue_text')\n    assert.strictEqual(res.body[0].issue_text, issue_text)\n    assert.property(res.body[0], 'created_on')\n    assert.property(res.body[0], 'updated_on')\n    assert.property(res.body[0], 'created_by')\n    assert.strictEqual(res.body[0].created_by, created_by)\n    assert.property(res.body[0], 'assigned_to')\n    assert.strictEqual(res.body[0].assigned_to, assigned_to)\n    assert.property(res.body[0], 'open')\n    assert.strictEqual(res.body[0].open, open)\n    assert.property(res.body[0], 'status_text')\n    assert.strictEqual(res.body[0].status_text, status_text)\n    assert.property(res.body[0], '_id')\n    done();\n  });",
                  "err": {},
                  "uuid": "6f79ee80-3c07-4b8f-bb41-b2ec6bba105f",
                  "parentUUID": "0ae01a91-dec0-4099-9da8-3c1a3149dab4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1ce0118-10eb-42ce-b087-a980e659ef9f",
                "6878c541-5f60-4a76-b8ca-1e1f45ebb96f",
                "6f79ee80-3c07-4b8f-bb41-b2ec6bba105f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 478,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8e2b05f4-f4e4-4b4c-9ae3-004736ab0267",
              "title": "PUT Requests to /api/issues/{projectname}",
              "fullFile": "/home/val/dev/website/public/tests/issue/functional-tests.js",
              "file": "/public/tests/issue/functional-tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Update one field on an issue",
                  "fullTitle": "Functional Tests PUT Requests to /api/issues/{projectname} Update one field on an issue",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .put('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    _id:_id,\n    issue_text: \"This is a new description for my issue\"\n  })\n  .end((err, res) => {\n    let id = _id.toHexString();\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.result, 'successfully updated')\n    assert.strictEqual(res.body[\"_id\"], id)\n    done();\n  })",
                  "err": {},
                  "uuid": "7fa9b9ba-4879-4d05-bf26-d3a738adf282",
                  "parentUUID": "8e2b05f4-f4e4-4b4c-9ae3-004736ab0267",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update multiple fields on an issue",
                  "fullTitle": "Functional Tests PUT Requests to /api/issues/{projectname} Update multiple fields on an issue",
                  "timedOut": true,
                  "duration": 5001,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .put('api/issues/apitest')\n  .send({\n    _id:_id,\n    issue_text: \"This is a new description for my issue\",\n    issue_title: \"This is a much better title now\"\n  })\n  .end((err, res) => {\n    let id = _id.toHexString();\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.result, 'successfully updated')\n    assert.strictEqual(res.body[\"_id\"], id)\n    done();\n  })",
                  "err": {
                    "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/val/dev/website/public/tests/issue/functional-tests.js)",
                    "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/val/dev/website/public/tests/issue/functional-tests.js)\n    at listOnTimeout (internal/timers.js:557:17)\n    at processTimers (internal/timers.js:500:7)",
                    "diff": null
                  },
                  "uuid": "ac599e18-891c-4c06-afee-51037fa744b4",
                  "parentUUID": "8e2b05f4-f4e4-4b4c-9ae3-004736ab0267",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update an issue with missing _id",
                  "fullTitle": "Functional Tests PUT Requests to /api/issues/{projectname} Update an issue with missing _id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .put('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    issue_text: \"This is a new description for my issue\",\n    issue_title: \"This is a much better title now\"\n  })\n  .end((err, res) => {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.error, 'missing _id')\n    done();\n  })",
                  "err": {},
                  "uuid": "fbd6dfde-1c94-4c38-801a-38dc816e0b09",
                  "parentUUID": "8e2b05f4-f4e4-4b4c-9ae3-004736ab0267",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update an issue with no fields to update",
                  "fullTitle": "Functional Tests PUT Requests to /api/issues/{projectname} Update an issue with no fields to update",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .put('/api/issues/apitest')\n  .send({\n    _id: _id\n  })\n  .end((err, res) => {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.error, 'no update field(s) sent')\n    assert.strictEqual(res.body._id, _id.toHexString())\n    done();\n  })",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at /home/val/dev/website/public/tests/issue/functional-tests.js:232:18\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:857:12)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:1070:18)\n    at endReadableNT (internal/streams/readable.js:1333:12)\n    at processTicksAndRejections (internal/process/task_queues.js:82:21)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "3fdeebd6-1581-4ae9-9849-4ce6827409fb",
                  "parentUUID": "8e2b05f4-f4e4-4b4c-9ae3-004736ab0267",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update an issue with an invalid _id",
                  "fullTitle": "Functional Tests PUT Requests to /api/issues/{projectname} Update an issue with an invalid _id",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let fakeID = new mongoose.Types.ObjectId(\"97c527013a3813a7558392ce\");\nchai\n  .request(server)\n  .put('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    _id: fakeID,\n    issue_text: \"This is a failed attempt at updating an issue\"\n  })\n  .end((err, res) => {\n    let id = fakeID.toHexString()\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.error, 'could not update')\n    assert.strictEqual(res.body._id, id)\n    done();\n  })",
                  "err": {},
                  "uuid": "eb19160f-d526-424b-8a66-a701fbbf94cc",
                  "parentUUID": "8e2b05f4-f4e4-4b4c-9ae3-004736ab0267",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fa9b9ba-4879-4d05-bf26-d3a738adf282",
                "fbd6dfde-1c94-4c38-801a-38dc816e0b09",
                "eb19160f-d526-424b-8a66-a701fbbf94cc"
              ],
              "failures": [
                "ac599e18-891c-4c06-afee-51037fa744b4",
                "3fdeebd6-1581-4ae9-9849-4ce6827409fb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5156,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a32b3ac9-eba9-4e17-ad81-4bb054b3d713",
              "title": "DELETE Requests to /api/issues/{projectname}",
              "fullFile": "/home/val/dev/website/public/tests/issue/functional-tests.js",
              "file": "/public/tests/issue/functional-tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Delete an issue",
                  "fullTitle": "Functional Tests DELETE Requests to /api/issues/{projectname} Delete an issue",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .delete('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    _id:_id\n  })\n  .end((err, res) => {\n    let id = _id.toHexString();\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.result, 'successfully deleted')\n    assert.strictEqual(res.body[\"_id\"], id)\n    done();\n  })",
                  "err": {},
                  "uuid": "d0f483ed-dd75-47b1-8a5f-034ce9dcfd2f",
                  "parentUUID": "a32b3ac9-eba9-4e17-ad81-4bb054b3d713",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete an issue with an invalid _id",
                  "fullTitle": "Functional Tests DELETE Requests to /api/issues/{projectname} Delete an issue with an invalid _id",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .delete('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    _id: fakeID\n  })\n  .end((err, res) => {\n    let id = fakeID.toHexString();\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.error, 'could not delete')\n    assert.strictEqual(res.body[\"_id\"], id)\n    done();\n  })",
                  "err": {},
                  "uuid": "268cd718-6e3c-4356-af08-0e148e0c2032",
                  "parentUUID": "a32b3ac9-eba9-4e17-ad81-4bb054b3d713",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete an issue with a missing _id",
                  "fullTitle": "Functional Tests DELETE Requests to /api/issues/{projectname} Delete an issue with a missing _id",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .delete('/projects/qa/issue-tracker/api/issues/apitest')\n  .send({\n    _id: \"\" \n  })\n  .end((err, res) => {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200)\n    assert.isObject(res.body)\n    assert.strictEqual(res.body.error, 'missing _id')\n    done();\n  })",
                  "err": {},
                  "uuid": "c71cfdce-05ae-4ac4-a560-405bd7568f71",
                  "parentUUID": "a32b3ac9-eba9-4e17-ad81-4bb054b3d713",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0f483ed-dd75-47b1-8a5f-034ce9dcfd2f",
                "268cd718-6e3c-4356-af08-0e148e0c2032",
                "c71cfdce-05ae-4ac4-a560-405bd7568f71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 89,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome-issue",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./public/mochawesome-reports/",
        "reportFilename": "mochawesome-issue",
        "reportTitle": "Issue Tracker Tests",
        "reportPageTitle": "Issue Tracker Tests",
        "charts": true
      },
      "version": "6.2.0"
    }
  }
}