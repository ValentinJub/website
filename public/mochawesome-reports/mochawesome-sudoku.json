{
  "stats": {
    "suites": 6,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-20T16:17:09.909Z",
    "end": "2023-09-20T16:17:10.035Z",
    "duration": 126,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "94f24707-e5b1-4413-856c-01efe7a095ea",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "23256ff0-289e-4286-b88b-cacd8d1a0fbd",
          "title": "Functional Tests",
          "fullFile": "/home/val/dev/website/public/tests/sudoku/functional-tests.js",
          "file": "/public/tests/sudoku/functional-tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57df2fbb-a4c4-4891-a8c3-e90d5ec2a988",
              "title": "Routing tests",
              "fullFile": "/home/val/dev/website/public/tests/sudoku/functional-tests.js",
              "file": "/public/tests/sudoku/functional-tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "ac76185f-9e8c-4759-b364-e57cd45e8315",
                  "title": "Solve methods",
                  "fullFile": "/home/val/dev/website/public/tests/sudoku/functional-tests.js",
                  "file": "/public/tests/sudoku/functional-tests.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Solve a puzzle with valid puzzle string: POST request to /api/solve",
                      "fullTitle": "Functional Tests Routing tests Solve methods Solve a puzzle with valid puzzle string: POST request to /api/solve",
                      "timedOut": false,
                      "duration": 28,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/solve')\n    .send({\n      puzzle: puzzle,\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.strictEqual(res.body.solved, true);\n      assert.strictEqual(res.body.solution, solution);\n      done();\n    })",
                      "err": {},
                      "uuid": "0ff13cf3-8711-44e7-a78f-4a0c79fec850",
                      "parentUUID": "ac76185f-9e8c-4759-b364-e57cd45e8315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Solve a puzzle with missing puzzle string: POST request to /api/solve",
                      "fullTitle": "Functional Tests Routing tests Solve methods Solve a puzzle with missing puzzle string: POST request to /api/solve",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/solve')\n    .send({\n      nothing: ''\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"error\")\n      assert.strictEqual(res.body.error, 'Required field missing');\n      done();\n    })",
                      "err": {},
                      "uuid": "d465f3f0-42bf-463c-a2b3-0e31b3c3f11b",
                      "parentUUID": "ac76185f-9e8c-4759-b364-e57cd45e8315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Solve a puzzle with invalid characters: POST request to /api/solve",
                      "fullTitle": "Functional Tests Routing tests Solve methods Solve a puzzle with invalid characters: POST request to /api/solve",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/solve')\n    .send({\n      puzzle: puzzleWithBadChar\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"error\")\n      assert.strictEqual(res.body.error, 'Invalid characters in puzzle');\n      done();\n    })",
                      "err": {},
                      "uuid": "d1ee0884-799a-42ec-81ea-6211c42cdb9d",
                      "parentUUID": "ac76185f-9e8c-4759-b364-e57cd45e8315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Solve a puzzle with incorrect length: POST request to /api/solve",
                      "fullTitle": "Functional Tests Routing tests Solve methods Solve a puzzle with incorrect length: POST request to /api/solve",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/solve')\n    .send({\n      puzzle: puzzleWithEightyChar\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"error\")\n      assert.strictEqual(res.body.error, 'Expected puzzle to be 81 characters long');\n      done();\n    })",
                      "err": {},
                      "uuid": "6c825206-9baa-4390-9336-5144ddeef527",
                      "parentUUID": "ac76185f-9e8c-4759-b364-e57cd45e8315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Solve a puzzle that cannot be solved: POST request to /api/solve",
                      "fullTitle": "Functional Tests Routing tests Solve methods Solve a puzzle that cannot be solved: POST request to /api/solve",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/solve')\n    .send({\n      puzzle: unsolvablePuzzle\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"error\")\n      assert.strictEqual(res.body.error, 'Puzzle cannot be solved');\n      done();\n    })",
                      "err": {},
                      "uuid": "f6b0fe7f-d5a0-4e54-9d4d-51a89ae0549d",
                      "parentUUID": "ac76185f-9e8c-4759-b364-e57cd45e8315",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Solve a puzzle that cannot be solved: POST request to /api/solve",
                      "fullTitle": "Functional Tests Routing tests Solve methods Solve a puzzle that cannot be solved: POST request to /api/solve",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/solve')\n    .send({\n      puzzle: unsolvablePuzzle\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"error\")\n      assert.strictEqual(res.body.error, 'Puzzle cannot be solved');\n      done();\n    })",
                      "err": {},
                      "uuid": "b2ec3c6a-9e9b-4846-a6fb-57bbb242e83f",
                      "parentUUID": "ac76185f-9e8c-4759-b364-e57cd45e8315",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0ff13cf3-8711-44e7-a78f-4a0c79fec850",
                    "d465f3f0-42bf-463c-a2b3-0e31b3c3f11b",
                    "d1ee0884-799a-42ec-81ea-6211c42cdb9d",
                    "6c825206-9baa-4390-9336-5144ddeef527",
                    "f6b0fe7f-d5a0-4e54-9d4d-51a89ae0549d",
                    "b2ec3c6a-9e9b-4846-a6fb-57bbb242e83f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 39,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                  "title": "Check methods",
                  "fullFile": "/home/val/dev/website/public/tests/sudoku/functional-tests.js",
                  "file": "/public/tests/sudoku/functional-tests.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "Check a puzzle placement with all fields: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with all fields: POST request to /api/check",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzle,\n      coordinate: 'A2',\n      value: '6'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"valid\")\n      assert.strictEqual(res.body.valid, true);\n      done();\n    })",
                      "err": {},
                      "uuid": "df694eb0-72b6-494c-bc93-d5709017e53a",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with single placement conflict: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with single placement conflict: POST request to /api/check",
                      "timedOut": false,
                      "duration": 15,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzle,\n      coordinate: 'A2',\n      value: '9'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"valid\")\n      assert.strictEqual(res.body.valid, false);\n      done();\n    })",
                      "err": {},
                      "uuid": "ddae8821-9b73-4951-9d7c-4b6cbaa48bbf",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with multiple placements conflict: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with multiple placements conflict: POST request to /api/check",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzle,\n      coordinate: 'A2',\n      value: '9'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"valid\")\n      assert.strictEqual(res.body.valid, false);\n      assert.isArray(res.body.conflict, 'conflict should be an array');\n      done();\n    })",
                      "err": {},
                      "uuid": "b43554c0-55be-41ea-959c-37e92ef6f5d3",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with all placements conflict: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with all placements conflict: POST request to /api/check",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzle,\n      coordinate: 'A2',\n      value: '9'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.hasAnyKeys(res.body, \"valid\")\n      assert.strictEqual(res.body.valid, false);\n      assert.isArray(res.body.conflict, 'conflict should be an array');\n      done();\n    })",
                      "err": {},
                      "uuid": "4d4eef5e-7522-4b62-9cc3-f4607f5e8c28",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with missing required fields: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with missing required fields: POST request to /api/check",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzle,\n      value: '9'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.strictEqual(res.body.error, 'Required field(s) missing');\n      done();\n    })",
                      "err": {},
                      "uuid": "f914a429-c0ed-4bd2-ad15-4b93dafb12a7",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with invalid characters: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with invalid characters: POST request to /api/check",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzleWithBadChar,\n      coordinate: 'A2',\n      value: '9'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.strictEqual(res.body.error, 'Invalid characters in puzzle');\n      done();\n    })",
                      "err": {},
                      "uuid": "df771b4d-35a1-49b8-b3de-6b57880c8319",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with incorrect length: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with incorrect length: POST request to /api/check",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzleWithEightyChar,\n      coordinate: 'A2',\n      value: '9'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.strictEqual(res.body.error, 'Expected puzzle to be 81 characters long');\n      done();\n    })",
                      "err": {},
                      "uuid": "ad53a1c2-2178-45b0-9dd9-f0ad0bf340da",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with invalid placement coordinate: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with invalid placement coordinate: POST request to /api/check",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzle,\n      coordinate: 'Z2',\n      value: '9'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.strictEqual(res.body.error, 'Invalid coordinate');\n      done();\n    })",
                      "err": {},
                      "uuid": "c82ce3d7-6713-43a8-8cd1-bab9cc1c03be",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "Check a puzzle placement with invalid placement value: POST request to /api/check",
                      "fullTitle": "Functional Tests Routing tests Check methods Check a puzzle placement with invalid placement value: POST request to /api/check",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "chai.request(server)\n    .post('/projects/qa/sudoku/api/check')\n    .send({\n      puzzle: puzzle,\n      coordinate: 'A2',\n      value: '91'\n    })\n    .end((err,res) => {\n      assert.equal(res.status, 200);\n      assert.strictEqual(res.body.error, 'Invalid value');\n      done();\n    })",
                      "err": {},
                      "uuid": "8d93d48e-f5d2-45ed-82ad-db204633cde2",
                      "parentUUID": "f9bf3e4d-b31d-4c45-96a5-d863f8acbc72",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "df694eb0-72b6-494c-bc93-d5709017e53a",
                    "ddae8821-9b73-4951-9d7c-4b6cbaa48bbf",
                    "b43554c0-55be-41ea-959c-37e92ef6f5d3",
                    "4d4eef5e-7522-4b62-9cc3-f4607f5e8c28",
                    "f914a429-c0ed-4bd2-ad15-4b93dafb12a7",
                    "df771b4d-35a1-49b8-b3de-6b57880c8319",
                    "ad53a1c2-2178-45b0-9dd9-f0ad0bf340da",
                    "c82ce3d7-6713-43a8-8cd1-bab9cc1c03be",
                    "8d93d48e-f5d2-45ed-82ad-db204633cde2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 48,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "643d2b05-6f0e-4f5b-933e-56879e6e0cfc",
          "title": "Unit Tests",
          "fullFile": "/home/val/dev/website/public/tests/sudoku/unit-tests.js",
          "file": "/public/tests/sudoku/unit-tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
              "title": "Logical tests",
              "fullFile": "/home/val/dev/website/public/tests/sudoku/unit-tests.js",
              "file": "/public/tests/sudoku/unit-tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Logic handles a valid puzzle string of 81 characters",
                  "fullTitle": "Unit Tests Logical tests Logic handles a valid puzzle string of 81 characters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.isString(Puzzle.puzzlesAndSolutions[0][0], 'Input should be string')",
                  "err": {},
                  "uuid": "6bd702da-e360-46d9-a1c3-06c42ce66bb7",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles a puzzle string with invalid characters (not 1-9 or .)",
                  "fullTitle": "Unit Tests Logical tests Logic handles a puzzle string with invalid characters (not 1-9 or .)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(solver.puzzleHasOnlyValidInputs(puzzleWithBadChar), false)\nassert.strictEqual(solver.puzzleHasOnlyValidInputs(Puzzle.puzzlesAndSolutions[0][0]), true)",
                  "err": {},
                  "uuid": "0bd827ee-038b-4ee3-bf8f-af0cb7e9b6f1",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles a puzzle string that is not 81 characters in length",
                  "fullTitle": "Unit Tests Logical tests Logic handles a puzzle string that is not 81 characters in length",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(solver.puzzleIsEightyOneCharLong(Puzzle.puzzlesAndSolutions[0][0]), true)\nassert.strictEqual(solver.puzzleIsEightyOneCharLong(puzzleWithEightyChar), false)",
                  "err": {},
                  "uuid": "d4675084-e128-4653-88fa-4231df668fca",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles a valid row placement",
                  "fullTitle": "Unit Tests Logical tests Logic handles a valid row placement",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver.updateRow(8, 8, '8');\nassert.strictEqual(solver.validateRow(8), true)\nsolver.resetLogicGrid();",
                  "err": {},
                  "uuid": "e5041b31-471b-4fe5-88c5-7e1654ac7f63",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles an invalid row placement",
                  "fullTitle": "Unit Tests Logical tests Logic handles an invalid row placement",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver.updateRow(8, 8, '6');\nassert.strictEqual(solver.validateRow(8), false)\nsolver.resetLogicGrid();",
                  "err": {},
                  "uuid": "0f74fa34-e327-42bc-84e1-3e64277c12b0",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles valid column placement",
                  "fullTitle": "Unit Tests Logical tests Logic handles valid column placement",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver.updateRow(8, 8, '8');\nassert.strictEqual(solver.validateColumn(8), true)\nsolver.resetLogicGrid();",
                  "err": {},
                  "uuid": "15126179-8211-4ae1-a79d-7620e175afb8",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles an invalid column placement",
                  "fullTitle": "Unit Tests Logical tests Logic handles an invalid column placement",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver.updateRow(8, 8, '1');\nassert.strictEqual(solver.validateColumn(8), false)\nsolver.resetLogicGrid();",
                  "err": {},
                  "uuid": "4ef3d091-28a1-4260-b38d-08626af9d997",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles valid region (3x3) placement",
                  "fullTitle": "Unit Tests Logical tests Logic handles valid region (3x3) placement",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver.updateRow(8, 8, '2');\nassert.strictEqual(solver.validateRegion(8), true)\nsolver.resetLogicGrid();",
                  "err": {},
                  "uuid": "6272aeec-c270-458a-89f4-8a5db746c3bf",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Logic handles an invalid region (3x3) placement",
                  "fullTitle": "Unit Tests Logical tests Logic handles an invalid region (3x3) placement",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver.updateRow(8, 8, '1');\nassert.strictEqual(solver.validateRegion(8), false)\nsolver.resetLogicGrid();",
                  "err": {},
                  "uuid": "df587d28-f2ca-4850-a254-2a4716d468f9",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid puzzle string passes the solver",
                  "fullTitle": "Unit Tests Logical tests Valid puzzle string passes the solver",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver = new SudokuSolver(solution)\nassert.strictEqual(solver.puzzleIsSolved(), true)",
                  "err": {},
                  "uuid": "a82f6121-3af9-405b-97bf-490d35a7bbe1",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid puzzle string fails the solver",
                  "fullTitle": "Unit Tests Logical tests Invalid puzzle string fails the solver",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver = new SudokuSolver(badSolution)\nassert.strictEqual(solver.puzzleIsSolved(), false)",
                  "err": {},
                  "uuid": "b2e015f2-02f0-4b4b-9c55-36a83dfba5da",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Solver returns the expected solution for an incomplete puzzle",
                  "fullTitle": "Unit Tests Logical tests Solver returns the expected solution for an incomplete puzzle",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "solver = new SudokuSolver(puzzle)\nassert.strictEqual(solver.solve().solution, solution)",
                  "err": {},
                  "uuid": "cab504af-53b3-4f43-a9c8-3e5769b2f70a",
                  "parentUUID": "d0d3ecac-dc7f-40d6-bc6b-399d3f962f4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bd702da-e360-46d9-a1c3-06c42ce66bb7",
                "0bd827ee-038b-4ee3-bf8f-af0cb7e9b6f1",
                "d4675084-e128-4653-88fa-4231df668fca",
                "e5041b31-471b-4fe5-88c5-7e1654ac7f63",
                "0f74fa34-e327-42bc-84e1-3e64277c12b0",
                "15126179-8211-4ae1-a79d-7620e175afb8",
                "4ef3d091-28a1-4260-b38d-08626af9d997",
                "6272aeec-c270-458a-89f4-8a5db746c3bf",
                "df587d28-f2ca-4850-a254-2a4716d468f9",
                "a82f6121-3af9-405b-97bf-490d35a7bbe1",
                "b2e015f2-02f0-4b4b-9c55-36a83dfba5da",
                "cab504af-53b3-4f43-a9c8-3e5769b2f70a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome-sudoku",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./public/mochawesome-reports",
        "reportFilename": "mochawesome-sudoku",
        "reportTitle": "Sudoku Tests",
        "reportPageTitle": "Sudoku Tests",
        "charts": true
      },
      "version": "6.2.0"
    }
  }
}