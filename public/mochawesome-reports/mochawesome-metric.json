{
  "stats": {
    "suites": 4,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-19T10:39:24.643Z",
    "end": "2023-09-19T10:39:24.702Z",
    "duration": 59,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d757f006-b8c9-455f-8b21-142505f0e693",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "35b0f9cb-d063-4e8f-8bd8-cb935c169809",
          "title": "Functional Tests",
          "fullFile": "/home/val/dev/website/public/tests/metric-converter/functional-test.js",
          "file": "/public/tests/metric-converter/functional-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "159c12ff-6b12-4f17-ad2d-8cf51946cc49",
              "title": "Conversion tests with chai-http",
              "fullFile": "/home/val/dev/website/public/tests/metric-converter/functional-test.js",
              "file": "/public/tests/metric-converter/functional-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Convert a valid input such as 10L: GET request to /api/convert",
                  "fullTitle": "Functional Tests Conversion tests with chai-http Convert a valid input such as 10L: GET request to /api/convert",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/metric-converter/api/convert?input=10l')\n  .end(function (err, res) {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.type, \"application/json\");\n    assert.equal(res.body.string, \"10 liters converts to 2.64172 gallons\");\n    done();\n  });",
                  "err": {},
                  "uuid": "47322bf1-6386-44df-88de-db8f57a33231",
                  "parentUUID": "159c12ff-6b12-4f17-ad2d-8cf51946cc49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert an invalid input such as 32g: GET request to /api/convert",
                  "fullTitle": "Functional Tests Conversion tests with chai-http Convert an invalid input such as 32g: GET request to /api/convert",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/metric-converter/api/convert?input=32g')\n  .end(function (err, res) {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.type, \"text/html\");\n    assert.equal(res.text, \"invalid unit\");\n    done();\n  });",
                  "err": {},
                  "uuid": "cfce4b16-30ee-4a58-93de-51c4e6d575fd",
                  "parentUUID": "159c12ff-6b12-4f17-ad2d-8cf51946cc49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert an invalid number such as 3/7.2/4kg: GET request to /api/convert",
                  "fullTitle": "Functional Tests Conversion tests with chai-http Convert an invalid number such as 3/7.2/4kg: GET request to /api/convert",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/metric-converter/api/convert?input=3/7.2/4kg')\n  .end(function (err, res) {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.type, \"text/html\");\n    assert.equal(res.text, \"invalid number\");\n    done();\n  });",
                  "err": {},
                  "uuid": "76cac13a-b278-445d-8556-da129ab58ef3",
                  "parentUUID": "159c12ff-6b12-4f17-ad2d-8cf51946cc49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert an invalid number AND unit such as 3/7.2/4kilomegagram: GET request to /api/convert",
                  "fullTitle": "Functional Tests Conversion tests with chai-http Convert an invalid number AND unit such as 3/7.2/4kilomegagram: GET request to /api/convert",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/metric-converter/api/convert?input=3/7.2/4kilomegagram')\n  .end(function (err, res) {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.type, \"text/html\");\n    assert.equal(res.text, \"invalid number and unit\");\n    done();\n  });",
                  "err": {},
                  "uuid": "c9f269a8-d0e0-4113-8a44-73bee0ee57c8",
                  "parentUUID": "159c12ff-6b12-4f17-ad2d-8cf51946cc49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert with no number such as kg: GET request to /api/convert",
                  "fullTitle": "Functional Tests Conversion tests with chai-http Convert with no number such as kg: GET request to /api/convert",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai\n  .request(server)\n  .get('/projects/qa/metric-converter/api/convert?input=kg')\n  .end(function (err, res) {\n    if(err) return console.error(err)\n    assert.equal(res.status, 200);\n    assert.equal(res.type, \"application/json\");\n    assert.equal(res.body.string, \"1 kilograms converts to 2.20462 pounds\");\n    done();\n  });",
                  "err": {},
                  "uuid": "e2d4798a-de79-4528-b402-0a7d9c35cd32",
                  "parentUUID": "159c12ff-6b12-4f17-ad2d-8cf51946cc49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47322bf1-6386-44df-88de-db8f57a33231",
                "cfce4b16-30ee-4a58-93de-51c4e6d575fd",
                "76cac13a-b278-445d-8556-da129ab58ef3",
                "c9f269a8-d0e0-4113-8a44-73bee0ee57c8",
                "e2d4798a-de79-4528-b402-0a7d9c35cd32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7b54608e-4949-4a68-80de-5d9e0cc2ab3d",
          "title": "Unit Tests",
          "fullFile": "/home/val/dev/website/public/tests/metric-converter/unit-tests.js",
          "file": "/public/tests/metric-converter/unit-tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
              "title": "Read Inputs",
              "fullFile": "/home/val/dev/website/public/tests/metric-converter/unit-tests.js",
              "file": "/public/tests/metric-converter/unit-tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Read a whole number input",
                  "fullTitle": "Unit Tests Read Inputs Read a whole number input",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let N = Math.floor(Math.random() * 100 + 1)\nassert.isNumber(convertHandler.getNum(N), 'Is a number')",
                  "err": {},
                  "uuid": "ecc98ec1-aadd-40e6-b0cf-87fd88de4d29",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Read a decimal number input",
                  "fullTitle": "Unit Tests Read Inputs Read a decimal number input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let N = Math.random() * 10;\nassert.isNumber(convertHandler.getNum(N), 'Is a decimal number')",
                  "err": {},
                  "uuid": "6fde01f0-9807-4be7-8b6b-569a8a693963",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Read a fractional number input",
                  "fullTitle": "Unit Tests Read Inputs Read a fractional number input",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let N1 = Math.floor(Math.random() * 100 + 1)\nlet N2 = Math.floor(Math.random() * 100 + 1)\nassert.isNumber(convertHandler.getNum(\"\" + N1 + \"/\" + N2), 'Is a fractional number')",
                  "err": {},
                  "uuid": "b94ac0fc-1b46-4726-938f-b994877b2803",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Read a fractional input with decimal",
                  "fullTitle": "Unit Tests Read Inputs Read a fractional input with decimal",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let N1 = Math.random() * 100 + 1\nlet N2 = Math.random() * 100 + 1\nassert.isNumber(convertHandler.getNum(\"\" + N1 + \"/\" + N2), 'Is a fractional number with decimal')",
                  "err": {},
                  "uuid": "3e8e4b48-b6f7-498c-a46d-bd1c91ca473d",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Return an error on a double-fraction",
                  "fullTitle": "Unit Tests Read Inputs Return an error on a double-fraction",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let N1 = Math.floor(Math.random() * 100 + 1)\nlet N2 = Math.floor(Math.random() * 100 + 1)\nlet N3 = Math.floor(Math.random() * 100 + 1)\nassert.strictEqual(convertHandler.getNum(N1 + \"/\" + N2 + \"/\" + N3), 'invalid number')",
                  "err": {},
                  "uuid": "cdc23f54-d873-4126-916c-ea7ca574f6eb",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Default to a numerical input of 1 when no numerical input is provided.",
                  "fullTitle": "Unit Tests Read Inputs Default to a numerical input of 1 when no numerical input is provided.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let input = 'noNumeric'\nassert.strictEqual(convertHandler.getNum(input), 1)",
                  "err": {},
                  "uuid": "f87103e0-7e89-48fe-8307-9af423ab1eb1",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "read each valid input unit",
                  "fullTitle": "Unit Tests Read Inputs read each valid input unit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let units = ['gal', 'L', 'km', 'mi', 'kg', 'lbs']\nassert.isTrue(units.includes(convertHandler.getUnit('gAl')))\nassert.isTrue(units.includes(convertHandler.getUnit('L')))\nassert.isTrue(units.includes(convertHandler.getUnit('MI')))\nassert.isTrue(units.includes(convertHandler.getUnit('KM')))\nassert.isTrue(units.includes(convertHandler.getUnit('lBS')))\nassert.isTrue(units.includes(convertHandler.getUnit('Kg')))\nassert.isFalse(units.includes(convertHandler.getUnit('mil')))\nassert.isFalse(units.includes(convertHandler.getUnit('min')))",
                  "err": {},
                  "uuid": "7b651312-0fdb-42d0-a977-2b0bf664ccdb",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Return an error for an invalid input unit",
                  "fullTitle": "Unit Tests Read Inputs Return an error for an invalid input unit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.getUnit('mil'), 'invalid unit')\nassert.strictEqual(convertHandler.getUnit('min'), 'invalid unit')\nassert.strictEqual(convertHandler.getUnit('g'), 'invalid unit')\nassert.strictEqual(convertHandler.getUnit('m'), 'invalid unit')\nassert.strictEqual(convertHandler.getUnit('oz'), 'invalid unit')\nassert.strictEqual(convertHandler.getUnit('hello'), 'invalid unit')",
                  "err": {},
                  "uuid": "697be85d-b62b-41dc-9e51-37eec795752f",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Return the correct return unit for each valid input unit",
                  "fullTitle": "Unit Tests Read Inputs Return the correct return unit for each valid input unit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.getReturnUnit('mi'), 'km')\nassert.strictEqual(convertHandler.getReturnUnit('km'), 'mi')\nassert.strictEqual(convertHandler.getReturnUnit('kg'), 'lbs')\nassert.strictEqual(convertHandler.getReturnUnit('lbs'), 'kg')\nassert.strictEqual(convertHandler.getReturnUnit('gal'), 'L')\nassert.strictEqual(convertHandler.getReturnUnit('l'), 'gal')",
                  "err": {},
                  "uuid": "886a9469-6d9d-4702-bbb8-1aaa9751eef4",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Correctly return the spelled-out string unit for each valid input unit.",
                  "fullTitle": "Unit Tests Read Inputs Correctly return the spelled-out string unit for each valid input unit.",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.spellOutUnit('mi'), 'miles')\nassert.strictEqual(convertHandler.spellOutUnit('km'), 'kilometers')\nassert.strictEqual(convertHandler.spellOutUnit('lbs'), 'pounds')\nassert.strictEqual(convertHandler.spellOutUnit('kg'), 'kilograms')\nassert.strictEqual(convertHandler.spellOutUnit('l'), 'liters')\nassert.strictEqual(convertHandler.spellOutUnit('gal'), 'gallons')",
                  "err": {},
                  "uuid": "45c5fbab-87c2-4c0e-8f48-b407abd8a593",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert kilometers to miles",
                  "fullTitle": "Unit Tests Read Inputs Convert kilometers to miles",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.convert(1, \"km\"),  0.62137)",
                  "err": {},
                  "uuid": "d604d54d-8d28-4348-8eb2-80dfd54ca1ef",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert miles to kilometers",
                  "fullTitle": "Unit Tests Read Inputs Convert miles to kilometers",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.convert(23, \"mi\"),  37.01482)",
                  "err": {},
                  "uuid": "9bdec7da-460e-43dc-ad3d-9a6c60319691",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert gallons to liters",
                  "fullTitle": "Unit Tests Read Inputs Convert gallons to liters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.convert(66, \"gal\"),  249.83706)",
                  "err": {},
                  "uuid": "aa95e6b7-8428-468e-9377-abfd0e5c1de9",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert liters to gallons",
                  "fullTitle": "Unit Tests Read Inputs Convert liters to gallons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.convert(25/4, \"l\"),  1.65108)",
                  "err": {},
                  "uuid": "b6647ba7-eb9e-4220-b0cc-dbbbd08888d2",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert kilograms to pounds",
                  "fullTitle": "Unit Tests Read Inputs Convert kilograms to pounds",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.convert(1/3, \"kg\"),  0.73487)",
                  "err": {},
                  "uuid": "4a6db754-bc20-45c8-a946-2c9ec808b1c5",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Convert pounds to kilograms",
                  "fullTitle": "Unit Tests Read Inputs Convert pounds to kilograms",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(convertHandler.convert(27, \"lbs\"),  12.24698)",
                  "err": {},
                  "uuid": "322755bc-52d6-42bc-a2a7-0902a6abcbc7",
                  "parentUUID": "7559b7d7-96d8-4eb0-9ea5-d77420814fb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecc98ec1-aadd-40e6-b0cf-87fd88de4d29",
                "6fde01f0-9807-4be7-8b6b-569a8a693963",
                "b94ac0fc-1b46-4726-938f-b994877b2803",
                "3e8e4b48-b6f7-498c-a46d-bd1c91ca473d",
                "cdc23f54-d873-4126-916c-ea7ca574f6eb",
                "f87103e0-7e89-48fe-8307-9af423ab1eb1",
                "7b651312-0fdb-42d0-a977-2b0bf664ccdb",
                "697be85d-b62b-41dc-9e51-37eec795752f",
                "886a9469-6d9d-4702-bbb8-1aaa9751eef4",
                "45c5fbab-87c2-4c0e-8f48-b407abd8a593",
                "d604d54d-8d28-4348-8eb2-80dfd54ca1ef",
                "9bdec7da-460e-43dc-ad3d-9a6c60319691",
                "aa95e6b7-8428-468e-9377-abfd0e5c1de9",
                "b6647ba7-eb9e-4220-b0cc-dbbbd08888d2",
                "4a6db754-bc20-45c8-a946-2c9ec808b1c5",
                "322755bc-52d6-42bc-a2a7-0902a6abcbc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome-metric",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./public/mochawesome-reports/metric",
        "reportFilename": "mochawesome-metric",
        "reportTitle": "Metric Converter Tests",
        "reportPageTitle": "Metric Converter Tests",
        "charts": true
      },
      "version": "6.2.0"
    }
  }
}